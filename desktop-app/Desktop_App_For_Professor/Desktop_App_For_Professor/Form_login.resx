<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="login_top_logo.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        SUVORK5CYII=
</value>
  </data>
</root>